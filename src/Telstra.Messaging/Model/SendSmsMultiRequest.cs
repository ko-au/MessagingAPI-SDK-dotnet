/* 
 * Telstra Messaging API
 *
 * The API specification for Telstra Messaging API
 *
 * The version of the OpenAPI document: 2.2.9
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Telstra.Messaging.Client.OpenAPIDateConverter;

namespace Telstra.Messaging.Model
{
    /// <summary>
    /// SendSmsMultiRequest
    /// </summary>
    [DataContract]
    public partial class SendSmsMultiRequest :  IEquatable<SendSmsMultiRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendSmsMultiRequest" /> class.
        /// </summary>
        /// <param name="smsMulti">Multiple SMS. Up to 10 messages can be sent in one API call..</param>
        /// <param name="notiyURL">Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc. Please refer to the Delivery Status section for more information.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/). .</param>
        public SendSmsMultiRequest(List<MessageMulti> smsMulti = default(List<MessageMulti>), string notiyURL = default(string))
        {
            this.SmsMulti = smsMulti;
            this.NotiyURL = notiyURL;
        }
        
        /// <summary>
        /// Multiple SMS. Up to 10 messages can be sent in one API call.
        /// </summary>
        /// <value>Multiple SMS. Up to 10 messages can be sent in one API call.</value>
        [DataMember(Name="smsMulti", EmitDefaultValue=false)]
        public List<MessageMulti> SmsMulti { get; set; }

        /// <summary>
        /// Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc. Please refer to the Delivery Status section for more information.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/). 
        /// </summary>
        /// <value>Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc. Please refer to the Delivery Status section for more information.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/). </value>
        [DataMember(Name="notiyURL", EmitDefaultValue=false)]
        public string NotiyURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendSmsMultiRequest {\n");
            sb.Append("  SmsMulti: ").Append(SmsMulti).Append("\n");
            sb.Append("  NotiyURL: ").Append(NotiyURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendSmsMultiRequest);
        }

        /// <summary>
        /// Returns true if SendSmsMultiRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SendSmsMultiRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendSmsMultiRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SmsMulti == input.SmsMulti ||
                    this.SmsMulti != null &&
                    input.SmsMulti != null &&
                    this.SmsMulti.SequenceEqual(input.SmsMulti)
                ) && 
                (
                    this.NotiyURL == input.NotiyURL ||
                    (this.NotiyURL != null &&
                    this.NotiyURL.Equals(input.NotiyURL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SmsMulti != null)
                    hashCode = hashCode * 59 + this.SmsMulti.GetHashCode();
                if (this.NotiyURL != null)
                    hashCode = hashCode * 59 + this.NotiyURL.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
