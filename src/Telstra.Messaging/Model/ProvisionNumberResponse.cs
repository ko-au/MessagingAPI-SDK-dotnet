/*
 * Telstra Messaging API
 *
 * The Telstra Messaging API specification
 *
 * The version of the OpenAPI document: 2.2.9
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Telstra.Messaging.Client.OpenAPIDateConverter;

namespace Telstra.Messaging.Model
{
    /// <summary>
    /// ProvisionNumberResponse
    /// </summary>
    [DataContract(Name = "ProvisionNumberResponse")]
    public partial class ProvisionNumberResponse : IEquatable<ProvisionNumberResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvisionNumberResponse" /> class.
        /// </summary>
        /// <param name="destinationAddress">The mobile phone number that was allocated.</param>
        /// <param name="description">Metadata for provisioned numbers which are valid for more than 5 years.</param>
        /// <param name="expiryDate">Free Trial apps will have a 30-Day Limit for their provisioned number. This is in Unix time format..</param>
        public ProvisionNumberResponse(string destinationAddress = default(string), string description = default(string), decimal expiryDate = default(decimal))
        {
            this.DestinationAddress = destinationAddress;
            this.Description = description;
            this.ExpiryDate = expiryDate;
        }

        /// <summary>
        /// The mobile phone number that was allocated
        /// </summary>
        /// <value>The mobile phone number that was allocated</value>
        /// <example>&quot;+61412345678&quot;</example>
        [DataMember(Name = "destinationAddress", EmitDefaultValue = false)]
        public string DestinationAddress { get; set; }

        /// <summary>
        /// Metadata for provisioned numbers which are valid for more than 5 years
        /// </summary>
        /// <value>Metadata for provisioned numbers which are valid for more than 5 years</value>
        /// <example>&quot;Your provisioned number is already valid for more than 5 years&quot;</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Free Trial apps will have a 30-Day Limit for their provisioned number. This is in Unix time format.
        /// </summary>
        /// <value>Free Trial apps will have a 30-Day Limit for their provisioned number. This is in Unix time format.</value>
        /// <example>1534463077362</example>
        [DataMember(Name = "expiryDate", EmitDefaultValue = false)]
        public decimal ExpiryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProvisionNumberResponse {\n");
            sb.Append("  DestinationAddress: ").Append(DestinationAddress).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvisionNumberResponse);
        }

        /// <summary>
        /// Returns true if ProvisionNumberResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvisionNumberResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvisionNumberResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DestinationAddress == input.DestinationAddress ||
                    (this.DestinationAddress != null &&
                    this.DestinationAddress.Equals(input.DestinationAddress))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    this.ExpiryDate.Equals(input.ExpiryDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DestinationAddress != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationAddress.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpiryDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
